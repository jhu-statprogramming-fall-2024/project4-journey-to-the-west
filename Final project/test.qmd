---
title: "Dashboard"
output: 
  flexdashboard::flex_dashboard:
    orientation: columns
runtime: shiny
---
```{r setup, include=FALSE}
# Load required libraries and data
library(shiny)
library(flexdashboard)
library(ggplot2)
data <- read.csv("data/NHANES_imputed_data.csv")
```

## Column 1 {.sidebar width="30%"}

Data from NHANES(2021-2023)

```{r}
textInput("name", "What is the title of the graph?", "Distribution of Variables")
selectInput("variable", label = "Select a variable:",
            choices = c("Please select",
                        "Sodium Intake", "Potassium Intake", "Calcium Intake", "Magnesium Intake", 
                        "Fiber Intake", "Systolic Blood Pressure", "Diastolic Blood Pressure", 
                        "BMI", "Age"), selected = "Please select")
selectInput("stratify", label = "Stratify by:",
            choices = c("None", "Gender", "Race"), selected = "None")
selectInput("plot_type", label = "Select plot type:",
            choices = c("Histogram", "Boxplot", "Scatterplot"), selected = "Histogram")
selectInput("n_breaks", label = "Number of bins (for histograms):",
            choices = c(10, 20, 30), selected = 20)
checkboxInput("density", "Show density curve (for histograms)", FALSE)
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
            min = 0.2, max = 4, value = 2, step = 0.4)
selectInput("color", label = "Select color:", 
            choices = c("Blue", "Pink", "Green", "Purple", "Yellow"), selected = "Green")
```

#### Download Plot

```{r}
downloadHandler(
  filename = function() {
    paste("plot_", Sys.Date(), ".png", sep = "")
  },
  content = function(file) {
    plot_color <- switch(input$color, "Blue" = "#33b0ff", "Yellow" = "#f7e284", 
                         "Green" = "#9ed450", "Purple" = "#b39ddb", "Pink" = "#ffb6c1")
    
    var <- switch(input$variable,
                  "Sodium Intake" = data$DR1TSODI,
                  "Potassium Intake" = data$DR1TPOTA,
                  "Calcium Intake" = data$DR1TCALC,
                  "Magnesium Intake" = data$DR1TMAGN,
                  "Fiber Intake" = data$DR1TFIBE,
                  "Systolic Blood Pressure" = data$sybp,
                  "Diastolic Blood Pressure" = data$dibp,
                  "BMI" = data$BMXBMI,
                  "Age" = data$RIDAGEYR)
    
    # Use ggplot for download
    p <- if (input$plot_type == "Histogram") {
      ggplot(data, aes(x = var)) +
        geom_histogram(bins = as.numeric(input$n_breaks), fill = plot_color, color = "black") +
        labs(title = input$name, x = input$variable, y = "Count") +
        theme_minimal() +
        if (input$density) geom_density(aes(y = ..density..), adjust = input$bw_adjust, color = "red", size = 1)
      
    } else if (input$plot_type == "Boxplot") {
      ggplot(data, aes(x = as.factor(RIAGENDR), y = var, fill = as.factor(RIAGENDR))) +
        geom_boxplot() +
        scale_fill_manual(values = c("1" = plot_color, "2" = "#ffa394")) +
        labs(title = paste("Boxplot of", input$variable, "by Gender"), x = "Gender", y = input$variable) +
        theme_minimal()
      
    } else if (input$plot_type == "Scatterplot") {
      ggplot(data, aes(x = var, y = sybp)) +
        geom_point(color = plot_color, alpha = 0.7) +
        labs(title = paste("Scatterplot:", input$variable, "vs Systolic BP"),
             x = input$variable, y = "Systolic Blood Pressure") +
        theme_minimal()
    }
    
    # Save the plot as a PNG file
    ggsave(file, plot = p, width = 8, height = 6)
  }
)
```

## Column 3
#### Summary Statistics

```{r}
renderPrint({
  if (input$variable != "Please select") {
    var <- switch(input$variable,
                  "Sodium Intake" = data$DR1TSODI,
                  "Potassium Intake" = data$DR1TPOTA,
                  "Calcium Intake" = data$DR1TCALC,
                  "Magnesium Intake" = data$DR1TMAGN,
                  "Fiber Intake" = data$DR1TFIBE,
                  "Systolic Blood Pressure" = data$sybp,
                  "Diastolic Blood Pressure" = data$dibp,
                  "BMI" = data$BMXBMI,
                  "Age" = data$RIDAGEYR)
    summary(var)
  } else {
    "Please select a variable to view summary statistics."
  }
})
```

### Dynamic Plot 

```{r}
renderPlot({
  plot_color <- switch(input$color, 
                       "Blue" = "#33b0ff", 
                       "Yellow" = "#f7e284", 
                       "Green" = "#9ed450", 
                       "Purple" = "#b39ddb", 
                       "Pink" = "#ffb6c1")
  
  if (input$variable == "Please select") {
    ggplot() +
      annotate("text", x = 0.5, y = 0.5, label = "Please select a variable and plot type.", size = 6) +
      theme_void()
  } else {
    var <- switch(input$variable,
                  "Sodium Intake" = data$DR1TSODI,
                  "Potassium Intake" = data$DR1TPOTA,
                  "Calcium Intake" = data$DR1TCALC,
                  "Magnesium Intake" = data$DR1TMAGN,
                  "Fiber Intake" = data$DR1TFIBE,
                  "Systolic Blood Pressure" = data$sybp,
                  "Diastolic Blood Pressure" = data$dibp,
                  "BMI" = data$BMXBMI,
                  "Age" = data$RIDAGEYR)
    
    strat_var <- switch(input$stratify,
                        "Gender" = data$RIAGENDR,
                        "Race" = data$RIDRETH3,
                        "None" = NULL)

    # Histogram with optional stratification
    if (input$plot_type == "Histogram") {
  p <- ggplot(data, aes(x = var)) +
    geom_histogram(aes(y = ..density..), bins = as.numeric(input$n_breaks),
                   fill = plot_color, color = "black") +
    labs(title = input$name, x = input$variable, y = "Density") +
    theme_bw()
  
  # Add density curve if checkbox is checked
  if (input$density) {
    p <- p + geom_density(aes(y = ..density..), color = "red", size = 1, adjust = input$bw_adjust)
  }
  
  # Add stratification using facet_wrap
  if (input$stratify == "Gender") {
    p <- p + facet_wrap(~RIAGENDR, scales = "free_y") +
      labs(title = paste("Histogram of", input$variable, "Stratified by Gender"), x = input$variable, y = "Density")
  } else if (input$stratify == "Race") {
    p <- p + facet_wrap(~RIDRETH3, scales = "free_y") +
      labs(title = paste("Histogram of", input$variable, "Stratified by Race"), x = input$variable, y = "Density")
  }
      p
      
    # Boxplot with stratification
    } else if (input$plot_type == "Boxplot") {
  # Boxplot with optional stratification
  p <- ggplot(data, aes(x = if (input$stratify == "None") "" else as.factor(strat_var), y = var)) +
    geom_boxplot(fill = plot_color, color = "black") +
    labs(title = paste("Boxplot of", input$variable, 
                       if (input$stratify != "None") paste("Stratified by", input$stratify) else ""),
         x = if (input$stratify == "None") "" else input$stratify, 
         y = input$variable) +
    theme_bw()
  
  # Add facet_wrap if stratified
  if (input$stratify == "Gender") {
    p <- p + facet_wrap(~RIAGENDR, scales = "free") +
      labs(x = "Gender")
  } else if (input$stratify == "Race") {
    p <- p + facet_wrap(~RIDRETH3, scales = "free") +
      labs(x = "Race")
  }
  
  p

      
    # Scatterplot stratified by color
    } else if (input$plot_type == "Scatterplot") {
  # Scatterplot with optional stratification
  p <- ggplot(data, aes(x = var, y = sybp)) +
    geom_point(aes(color = as.factor(strat_var)), alpha = 0.7) +
    labs(title = paste("Scatterplot of", input$variable, "vs Systolic BP", 
                       if (input$stratify != "None") paste("Stratified by", input$stratify) else ""),
         x = input$variable, y = "Systolic Blood Pressure", color = input$stratify) +
    theme_bw()
  
  # Add facet_wrap if stratified
  if (input$stratify == "Gender") {
    p <- p + facet_wrap(~RIAGENDR, scales = "free") +
      labs(x = input$variable)
  } else if (input$stratify == "Race") {
    p <- p + facet_wrap(~RIDRETH3, scales = "free") +
      labs(x = input$variable)
  }
  
  p
}
  }
})
```



