[
  {
    "objectID": "Final_project.html",
    "href": "Final_project.html",
    "title": "Final project",
    "section": "",
    "text": "Yishan Lin: JHED ID: ylin183; Email: ylin183@jh.edu\nYingqi Wang: JHED ID: ywang911; Email: ywang911@jh.edu\nYiming Ding: JHED ID: yding75; Email: yding75@jh.edu\nRuiqing Cai: JHED ID: rcai9; Email: rcai9@jh.edu"
  },
  {
    "objectID": "Final_project.html#authors-information",
    "href": "Final_project.html#authors-information",
    "title": "Final project",
    "section": "",
    "text": "Yishan Lin: JHED ID: ylin183; Email: ylin183@jh.edu\nYingqi Wang: JHED ID: ywang911; Email: ywang911@jh.edu\nYiming Ding: JHED ID: yding75; Email: yding75@jh.edu\nRuiqing Cai: JHED ID: rcai9; Email: rcai9@jh.edu"
  },
  {
    "objectID": "Final_project.html#data-preparation-and-robust-analysis",
    "href": "Final_project.html#data-preparation-and-robust-analysis",
    "title": "Final project",
    "section": "1. Data Preparation and Robust Analysis",
    "text": "1. Data Preparation and Robust Analysis\n\n\n\n\n\n\nNote\n\n\n\nIn this section, data downloading, processing, and some initial analysis were conducted by using the “functional Programming” Paradigms\n\n\n\n1.1 Download and Initial Cleaning\nData are directly downloaded from the CDC websites. For more information see the code\n\n\nCode\n# Create a folder to store all the data\nif (!dir.exists(\"data\")) { # check if folder already exists\n  dir.create(\"data\")\n}\n\n# Setup function to download the data\ndownload_and_save &lt;- function(url, filename) {\n  filepath &lt;- file.path(\"data\", filename)\n  \n  if (!file.exists(filepath)) { # Check if file already exists\n    message(paste(\"Downloading\", filename, \"...\"))\n    dataset &lt;- read_xpt(url)\n    saveRDS(dataset, filepath)\n  } else {\n    message(paste(filename, \"already exists. Loading from cache.\"))\n  }\n  \n  readRDS(filepath) # Load the dataset\n}\n \n# Function to clean individual datasets\nclean_dataset &lt;- function(data, vars) {\n  data %&gt;% dplyr::select(all_of(vars))\n}\n\n# Selecting data\ndatasets &lt;- list(\n  demo = list(\n    url = \"https://wwwn.cdc.gov/Nchs/Data/Nhanes/Public/2021/DataFiles/DEMO_L.xpt\",\n    file = \"demo_data.rds\",\n    vars = c(\"SEQN\", \"RIDAGEYR\", \"RIAGENDR\", \"RIDRETH3\", \"DMDEDUC2\")\n  ),\n  diet = list(\n    url = \"https://wwwn.cdc.gov/Nchs/Data/Nhanes/Public/2021/DataFiles/DR1TOT_L.xpt\",\n    file = \"diet_data.rds\",\n    vars = c(\"SEQN\", \"DR1TSODI\", \"DRQSDT3\", \"DR1TFIBE\", \"DR1TPOTA\", \"DR1TCALC\", \"DR1TMAGN\", \"DR1TKCAL\")\n  ),\n  bp = list(\n    url = \"https://wwwn.cdc.gov/Nchs/Data/Nhanes/Public/2021/DataFiles/BPXO_L.xpt\",\n    file = \"bp_data.rds\",\n    vars = c(\"SEQN\", \"BPXOSY1\", \"BPXOSY2\", \"BPXOSY3\", \"BPXODI1\", \"BPXODI2\", \"BPXODI3\")\n  ),\n  body = list(\n    url = \"https://wwwn.cdc.gov/Nchs/Data/Nhanes/Public/2021/DataFiles/BMX_L.xpt\",\n    file = \"body_data.rds\",\n    vars = c(\"SEQN\", \"BMXBMI\")\n  ),\n  lab = list(\n    url = \"https://wwwn.cdc.gov/Nchs/Data/Nhanes/Public/2021/DataFiles/TCHOL_L.xpt\",\n    file = \"lab_data.rds\",\n    vars = c(\"SEQN\", \"LBXTC\")\n  ),\n  ques = list(\n    url = \"https://wwwn.cdc.gov/Nchs/Data/Nhanes/Public/2021/DataFiles/BPQ_L.xpt\",\n    file = \"ques_data.rds\",\n    vars = c(\"SEQN\", \"BPQ150\")\n  )\n)\n\n# Downloading, saving, and cleaning datasets\nnhanes_data &lt;- purrr::map(datasets, function(info) {\n  raw_data &lt;- download_and_save(info$url, info$file)\n  clean_dataset(raw_data, info$vars)\n})\n\n# Merging into single dataframe\nmerged_data &lt;- purrr::reduce(nhanes_data, dplyr::left_join, by = \"SEQN\")\n\n\n\n\n1.2 Process and Table 1\nTable 1: Characteristics of Study Participants from August 2021 to August 2023\n\n\nCode\n# Function to preprocess data\nprocess_data &lt;- function(data) {\n  data %&gt;%\n    dplyr::filter(RIDAGEYR &gt;= 20) %&gt;%\n    dplyr::mutate(\n      RIAGENDR = dplyr::recode_factor(RIAGENDR, `1` = \"Male\", `2` = \"Female\"),\n      RIDRETH3 = dplyr::recode_factor(\n        RIDRETH3,\n        `1` = \"Mexican American\",\n        `2` = \"Other Hispanic\",\n        `3` = \"Non-Hispanic White\",\n        `4` = \"Non-Hispanic Black\",\n        `6` = \"Non-Hispanic Asian\",\n        `7` = \"Other Race - Including Multi-Racial\"\n      ),\n      DMDEDUC2 = dplyr::recode_factor(\n        DMDEDUC2,\n        `1` = \"Less than 9th grade\",\n        `2` = \"9-11th grade (Includes 12th grade with no diploma)\",\n        `3` = \"High school graduate/GED or equivalent\",\n        `4` = \"Some college or AA degree\",\n        `5` = \"College graduate or above\"\n      ),\n      BPQ150 = dplyr::recode_factor(BPQ150, `1` = \"Yes\", `2` = \"No\"),\n      DRQSDT3 = dplyr::recode_factor(DRQSDT3, `3` = \"Yes\"),\n      sybp = rowMeans(dplyr::select(., BPXOSY1, BPXOSY2, BPXOSY3), na.rm = TRUE),\n      dibp = rowMeans(dplyr::select(., BPXODI1, BPXODI2, BPXODI3), na.rm = TRUE)\n    )\n}\n\n# Create Table 1 function\ncreate_table1 &lt;- function(data) {\n  table1(~ RIDAGEYR + RIAGENDR + RIDRETH3 + DR1TSODI + DR1TPOTA + DR1TCALC + DR1TMAGN + DR1TFIBE + BMXBMI + sybp + dibp + BPQ150, data = data)\n}\n\n# Labeling data\nset_labels_and_units &lt;- function(data, labels, units = NULL) {\n  for (var in names(labels)) {\n    label(data[[var]]) &lt;- labels[[var]]\n  }\n  if (!is.null(units)) {\n    for (var in names(units)) {\n      units(data[[var]]) &lt;- units[[var]]\n    }\n  }\n  return(data)\n}\n\n## Define labels and units as named lists\nlabels &lt;- list(\n  RIDAGEYR = \"Age at Screening\",\n  RIAGENDR = \"Gender\",\n  RIDRETH3 = \"Race\",\n  BPQ150 = \"High Blood Pressure Medication\",\n  sybp = \"Systolic Blood Pressure\",\n  dibp = \"Diastolic Blood Pressure\",\n  BMXBMI = \"Body Mass Index\"\n)\n\nunits &lt;- list(\n  RIDAGEYR = \"Year\",\n  sybp = \"mmHg\",\n  dibp = \"mmHg\",\n  BMXBMI = \"kg/m\\u00B2\"\n)\n\n# Apply the data processing function\ncleaned_data &lt;- process_data(merged_data)\n\n# Apply labels and units\ncleaned_data &lt;- set_labels_and_units(cleaned_data, labels, units)\n\n# Generate Table 1\ncreate_table1(cleaned_data)\n\n\n\n\n\n\n\n\n\n\n\nOverall\n(N=7809)\n\n\n\n\nAge at Screening (Year)\n\n\n\nMean (SD)\n53.6 (17.5)\n\n\nMedian [Min, Max]\n57.0 [20.0, 80.0]\n\n\nGender\n\n\n\nMale\n3488 (44.7%)\n\n\nFemale\n4321 (55.3%)\n\n\nRace\n\n\n\nMexican American\n545 (7.0%)\n\n\nOther Hispanic\n780 (10.0%)\n\n\nNon-Hispanic White\n4555 (58.3%)\n\n\nNon-Hispanic Black\n995 (12.7%)\n\n\nNon-Hispanic Asian\n422 (5.4%)\n\n\nOther Race - Including Multi-Racial\n512 (6.6%)\n\n\nSodium (mg)\n\n\n\nMean (SD)\n3070 (1620)\n\n\nMedian [Min, Max]\n2770 [0, 20000]\n\n\nMissing\n3011 (38.6%)\n\n\nPotassium (mg)\n\n\n\nMean (SD)\n2480 (1280)\n\n\nMedian [Min, Max]\n2290 [0, 14300]\n\n\nMissing\n3011 (38.6%)\n\n\nCalcium (mg)\n\n\n\nMean (SD)\n882 (556)\n\n\nMedian [Min, Max]\n770 [0, 9270]\n\n\nMissing\n3011 (38.6%)\n\n\nMagnesium (mg)\n\n\n\nMean (SD)\n294 (159)\n\n\nMedian [Min, Max]\n264 [0, 2230]\n\n\nMissing\n3011 (38.6%)\n\n\nDietary fiber (gm)\n\n\n\nMean (SD)\n16.2 (10.5)\n\n\nMedian [Min, Max]\n14.1 [0, 127]\n\n\nMissing\n3011 (38.6%)\n\n\nBody Mass Index (kg/m²)\n\n\n\nMean (SD)\n29.8 (7.36)\n\n\nMedian [Min, Max]\n28.5 [11.1, 74.8]\n\n\nMissing\n1839 (23.5%)\n\n\nSystolic Blood Pressure (mmHg)\n\n\n\nMean (SD)\n123 (18.1)\n\n\nMedian [Min, Max]\n120 [70.0, 232]\n\n\nMissing\n1946 (24.9%)\n\n\nDiastolic Blood Pressure (mmHg)\n\n\n\nMean (SD)\n74.7 (11.0)\n\n\nMedian [Min, Max]\n74.0 [34.0, 139]\n\n\nMissing\n1946 (24.9%)\n\n\nHigh Blood Pressure Medication\n\n\n\nYes\n2437 (31.2%)\n\n\nNo\n503 (6.4%)\n\n\nMissing\n4869 (62.4%)\n\n\n\n\n\n\n\n\n\n1.3 Multiple Imputation for the Missing values by Random Forest\n\n\nCode\nimputed_data_file &lt;- \"data/NHANES_imputed_data.csv\"\nif (file.exists(imputed_data_file)) {\n  message(\"Imputed dataset exists. Loading from file.\")\n  cleaned_data_imputed &lt;- read.csv(imputed_data_file)\n} else {\n  # Perform multiple imputation\n  set.seed(123)\n  imputed_data &lt;- mice(\n    cleaned_data, \n    m = 10, # Number of multiple imputations\n    method = \"pmm\", # Predictive Mean Matching\n    maxit = 50, # Maximum number of iterations\n    seed = 123\n  )\n\n  # Check the imputed data summary\n  summary(imputed_data)\n\n  # Complete the dataset by pooling results from imputations\n  cleaned_data_imputed &lt;- complete(imputed_data)\n\n  # Save the imputed dataset\n  write.csv(cleaned_data_imputed, imputed_data_file, row.names = FALSE)\n  message(\"Imputed dataset created and saved.\")\n}\n\n\nImputed dataset exists. Loading from file.\n\n\n\n\n1.4 Initial Anlysis\nA stratified Analysis by gender was conducted.\n\n\nCode\n# Stratification function setup\nstratified_analysis &lt;- function(data, group_var, analysis_func) {\n  # Split data into groups\n  split_data &lt;- split(data, data[[group_var]])\n  \n  # Apply the analysis function and add group label\n  summary_list &lt;- map(split_data, ~ {\n    analysis_func(.x) %&gt;%\n      mutate(Gender = unique(.x[[group_var]])) # Add group label\n  })\n  \n  # Combine all group summaries into a single table\n  combined_summary &lt;- bind_rows(summary_list)\n  \n  # Return combined table\n  combined_summary\n}\n\nsummarize_data &lt;- function(data) {\n  data %&gt;%\n    summarize(\n      mean_age = mean(RIDAGEYR, na.rm = TRUE),\n      mean_Na = mean(DR1TSODI, na.rm = TRUE),\n      mean_K = mean(DR1TPOTA, na.rm = TRUE),\n      mean_Mg = mean(DR1TMAGN, na.rm = TRUE),\n      mean_Ca = mean(DR1TCALC, na.rm = TRUE), \n      mean_fiber = mean(DR1TFIBE, na.rm = TRUE),\n      mean_sbp = mean(sybp, na.rm = TRUE),\n      mean_dbp = mean(dibp, na.rm = TRUE),\n      n = n()\n    )\n}\n\n# stratified analysis by gender\nstratified_summary &lt;- stratified_analysis(cleaned_data_imputed, \"RIAGENDR\", summarize_data)\nknitr::kable(stratified_summary, \n      caption = \"Table 2: Summary of each variables stratified by gender\", \n      format = \"html\")\n\n\n\nTable 2: Summary of each variables stratified by gender\n\n\nmean_age\nmean_Na\nmean_K\nmean_Mg\nmean_Ca\nmean_fiber\nmean_sbp\nmean_dbp\nn\nGender\n\n\n\n\n53.48716\n2704.819\n2186.794\n261.4228\n786.7709\n14.69662\n121.3920\n74.32126\n4321\nFemale\n\n\n53.80247\n3591.358\n2801.548\n331.5086\n989.5361\n18.05542\n124.5678\n75.22052\n3488\nMale"
  },
  {
    "objectID": "Dashboard.html",
    "href": "Dashboard.html",
    "title": "Histograms",
    "section": "",
    "text": "Code\n# load data from the project\nlibrary(here)\n\n\nhere() starts at C:/Users/Cai13/OneDrive - Johns Hopkins/Statistical Programming Paradigms and Workflows/Projects/Project 4/project4-journey-to-the-west/Final project\n\n\nCode\nlibrary(shiny)\n\n\nWarning: package 'shiny' was built under R version 4.4.2\n\n\nCode\nlibrary(flexdashboard)\n\n\nWarning: package 'flexdashboard' was built under R version 4.4.2\n\n\nCode\nload(here(\"data.RData\"))"
  },
  {
    "objectID": "Dashboard.html#column",
    "href": "Dashboard.html#column",
    "title": "Histograms",
    "section": "Column",
    "text": "Column\nData from NHANES(2021-2023)\n\n\nCode\ntextInput(\"name\", \"What is the title of the graph?\")\n\n\n\nWhat is the title of the graph?\n\n\n\n\nCode\nselectInput(\"variable\", label = \"Which variable:\",\n            choices = c(\"Please select\",\"Sodium intake\", \"Systolic Blood Pressure\", \"Diastolic Blood Pressure\"), selected = \"Please select\")\n\n\n\nWhich variable:\n\nPlease select\nSodium intake\nSystolic Blood Pressure\nDiastolic Blood Pressure\n\n\n\n\n\nCode\nselectInput(\"n_breaks\", label = \"Number of bins:\",\n            choices = c(10, 20, 30), selected = 20)\n\n\n\nNumber of bins:\n\n10\n20\n30\n\n\n\n\n\nCode\ncheckboxInput(\"density\", \"show density curve\", FALSE)\n\n\n\n\n\n\nshow density curve\n\n\n\n\n\nCode\nsliderInput(\"bw_adjust\", label = \"Bandwidth adjustment:\",\n            min = 0.2, max = 4, value = 2, step = 0.4)\n\n\n\nBandwidth adjustment:"
  },
  {
    "objectID": "Dashboard.html#column-1",
    "href": "Dashboard.html#column-1",
    "title": "Histograms",
    "section": "Column",
    "text": "Column\n\nDistributions of Exposure and Outcome Variables\n\n\nCode\nrenderPlot({\n  if(input$density == TRUE){\n    if(input$variable==\"Sodium intake\"){\n    hist(data$DR1TSODI, probability = TRUE, breaks = as.numeric(input$n_breaks),\n       xlab = \"Number of Observations\", main = input$name)\n    dens &lt;- density(data$DR1TSODI, adjust = input$bw_adjust)\n    lines(dens, col = \"red\")\n    }else{\n      if(input$variable==\"Systolic Blood Pressure\"){\n    hist(data$sybp, probability = TRUE, breaks = as.numeric(input$n_breaks),\n       xlab = \"Number of Observations\", main = input$name)\n    dens &lt;- density(data$sybp, adjust = input$bw_adjust)\n    lines(dens, col = \"red\")\n    }else{\n      if(input$variable==\"Diastolic Blood Pressure\"){\n    hist(data$dibp, probability = TRUE, breaks = as.numeric(input$n_breaks),\n       xlab = \"Number of Observations\", main = input$name)\n    dens &lt;- density(data$dibp, adjust = input$bw_adjust)\n    lines(dens, col = \"red\")\n    }else{\n      \n    }\n    }\n    }\n  } else{\n    if(input$variable==\"Sodium intake\"){\n    hist(data$DR1TSODI, probability = TRUE, breaks = as.numeric(input$n_breaks),\n       xlab = \"Number of Observations\", main = input$name)\n    }else{\n      if(input$variable==\"Systolic Blood Pressure\"){\n    hist(data$sybp, probability = TRUE, breaks = as.numeric(input$n_breaks),\n       xlab = \"Number of Observations\", main = input$name)\n    }else{\n      if(input$variable==\"Diastolic Blood Pressure\"){\n    hist(data$dibp, probability = TRUE, breaks = as.numeric(input$n_breaks),\n       xlab = \"Number of Observations\", main = input$name)\n    }else{\n      \n    }\n    }\n    }\n  }\n})"
  },
  {
    "objectID": "Final_project.html#statistical-analysis-for-association-between-sodium-intake-and-blood-pressure",
    "href": "Final_project.html#statistical-analysis-for-association-between-sodium-intake-and-blood-pressure",
    "title": "Final project",
    "section": "2. Statistical Analysis for Association between Sodium Intake and Blood Pressure",
    "text": "2. Statistical Analysis for Association between Sodium Intake and Blood Pressure\n\n\nCode\n# # Ensure cleaned data is available\n# reg_data &lt;- cleaned_data %&gt;%\n#   mutate(\n#     BP_Category = case_when(\n#       sybp &lt; 90 ~ \"Low\",\n#       sybp &gt;= 90 & sybp &lt;= 130 ~ \"Normal\",\n#       sybp &gt; 130 ~ \"High\"\n#     ) %&gt;% factor(levels = c(\"Low\", \"Normal\", \"High\")), # Ordered levels\n#     BP_Binary = ifelse(sybp &gt; 130, 1, 0) # Binary for logistic regression\n#   )\n# \n# # Model 1: Linear Model (Sodium Intake and Blood Pressure)\n# model1 &lt;- lm(sybp ~ DR1TSODI, data = reg_data)\n# \n# # Model 2: Linear Model (Age, Gender, Race, Sodium Intake)\n# model2 &lt;- lm(sybp ~ DR1TSODI + RIDAGEYR + RIAGENDR + RIDRETH3, data = reg_data)\n# \n# # Model 3: Linear Model (Adding more covariates)\n# model3 &lt;- lm(sybp ~ DR1TSODI + RIDAGEYR + RIAGENDR + RIDRETH3 + BMXBMI + LBXTC + BPQ150 + DR1TKCAL, data = reg_data)\n# \n# # Model 4: Logistic Regression (Sodium Intake and Blood Pressure)\n# model4 &lt;- glm(BP_Binary ~ DR1TSODI, data = reg_data, family = binomial)\n# \n# # Model 5: Ordinal Logistic Regression (Sodium Intake and Blood Pressure)\n# model5 &lt;- polr(BP_Category ~ DR1TSODI, data = reg_data, Hess = TRUE)\n# \n# # Model 6: Ordinal Logistic Regression (Adding age, gender, race)\n# model6 &lt;- polr(BP_Category ~ DR1TSODI + RIDAGEYR + RIAGENDR + RIDRETH3, data = reg_data, Hess = TRUE)\n# \n# # Model 7: Ordinal Logistic Regression (Adding more covariates)\n# model7 &lt;- polr(BP_Category ~ DR1TSODI + RIDAGEYR + RIAGENDR + RIDRETH3 + BMXBMI + LBXTC + BPQ150 + DR1TKCAL, data = reg_data, Hess = TRUE)\n# \n# stargazer(model1, model2, model3, model4, model5, model6, model7, type = \"text\", title = \"Regression Models Summary\")"
  },
  {
    "objectID": "Final_project.html#conduct-machine-learning-programming-paradigms",
    "href": "Final_project.html#conduct-machine-learning-programming-paradigms",
    "title": "Final project",
    "section": "3. Conduct Machine Learning Programming Paradigms",
    "text": "3. Conduct Machine Learning Programming Paradigms"
  },
  {
    "objectID": "Final_project.html#using-s3-to-conduct-object-oriented-programming",
    "href": "Final_project.html#using-s3-to-conduct-object-oriented-programming",
    "title": "Final project",
    "section": "2. Using S3 to Conduct Object-Oriented Programming",
    "text": "2. Using S3 to Conduct Object-Oriented Programming\n\n2.1 Setup S3 Object for Regression Analysis\n\n\nCode\n# Define an S3 class for blood pressure analysis\nBPAnalysis &lt;- function(data) {\n  structure(\n    list(data = data, summaries = list()), # Store the dataset and summaries in the object\n    class = \"BPAnalysis\"\n  )\n}\n\n# S3 method for cleaning data - SYBP\nsybp.BPAnalysis &lt;- function(obj) {\n  obj$data &lt;- obj$data %&gt;%\n    mutate(\n      BP_Category = factor(case_when(\n        sybp &lt; 90 ~ \"Low\",\n        sybp &gt;= 90 & sybp &lt;= 130 ~ \"Normal\",\n        sybp &gt; 130 ~ \"High\"\n      ), levels = c(\"Low\", \"Normal\", \"High\")),\n      BP_Binary = ifelse(sybp &gt; 130, 1, 0)\n    )\n  obj\n}\n\n# S3 method for cleaning data - DIBP\ndibp.BPAnalysis &lt;- function(obj) {\n  obj$data &lt;- obj$data %&gt;%\n    mutate(\n      BP_Category = factor(case_when(\n        dibp &lt; 60 ~ \"Low\",\n        dibp &gt;= 60 & dibp &lt;= 80 ~ \"Normal\",\n        dibp &gt; 80 ~ \"High\"\n      ), levels = c(\"Low\", \"Normal\", \"High\")),\n      BP_Binary = ifelse(dibp &gt; 80, 1, 0)\n    )\n  obj\n}\n\n# S3 method for modeling with condition-based formulas\nmodel.BPAnalysis &lt;- function(obj, type = \"linear\", \n                             variables = c(\"DR1TSODI\", \"DR1TFIBE\", \"DR1TPOTA\", \n                                           \"DR1TCALC\", \"DR1TMAGN\"), \n                             response = \"sybp\") {\n  # Base formula\n  response &lt;- if (type == \"logistic\") \"BP_Binary\" else if (type == \"ordinal\") \"BP_Category\" else response\n  formula &lt;- as.formula(paste(response, \"~\", paste(variables, collapse = \" + \")))\n  \n  if (type == \"linear\") {\n    obj$model &lt;- lm(formula, data = obj$data)\n  } else if (type == \"logistic\") {\n    obj$model &lt;- glm(formula, data = obj$data, family = binomial)\n  } else if (type == \"ordinal\") {\n    obj$model &lt;- MASS::polr(formula, data = obj$data, Hess = TRUE)\n  } else {\n    stop(\"Invalid model type.\")\n  }\n  obj\n}\n\n# S3 method for summarizing results\nsummary.BPAnalysis &lt;- function(obj, model_description) {\n  if (is.null(obj$model)) {\n    stop(\"No model has been created yet.\")\n  }\n  obj$summaries[[model_description]] &lt;- capture.output(summary(obj$model))\n  obj\n}\n\n# Extend S3 to handle all seven models for a given response variable\nrun_models.BPAnalysis &lt;- function(obj, response = \"sybp\") {\n  dietary_intake &lt;- c(\"DR1TSODI\", \"DR1TFIBE\", \"DR1TPOTA\", \"DR1TCALC\", \"DR1TMAGN\")\n  models &lt;- list(\n    list(type = \"linear\", variables = c(dietary_intake), \n         description = \"Model 1: Linear Model (5 Dietary Intake Nutrients and Blood Pressure)\"),\n    list(type = \"linear\", \n         variables = c(dietary_intake, \"RIDAGEYR\", \"RIAGENDR\", \"RIDRETH3\", \"DMDEDUC2\"), \n         description = \"Model 2: Linear Model (5 Dietary Intake Nutrients, Age, Gender, Race, Education Level)\"),\n    list(type = \"linear\", \n         variables = c(dietary_intake, \"RIDAGEYR\", \"RIAGENDR\", \"RIDRETH3\", \"DMDEDUC2\", \n                       \"BMXBMI\", \"LBXTC\", \"BPQ150\", \"DR1TKCAL\", \"DR1TSODI\"), \n         description = \"Model 3: Linear Model (5 Dietary Intake Nutrients, Age, Gender, Race, Education Level, BMI, Total Cholesterol, High Blood Pressure Medication, Calories Intake, Low Sodium Meal)\"),\n    list(type = \"logistic\", variables = c(dietary_intake), \n         description = \"Model 4: Logistic Regression (5 Dietary Intake Nutrients and Blood Pressure)\"),\n    list(type = \"ordinal\", variables = c(dietary_intake), \n         description = \"Model 5: Ordinal Logistic Regression (5 Dietary Intake Nutrients and Blood Pressure)\"),\n    list(type = \"ordinal\", \n         variables = c(dietary_intake, \"RIDAGEYR\", \"RIAGENDR\", \"RIDRETH3\", \"DMDEDUC2\"), \n         description = \"Model 6: Ordinal Logistic Regression (5 Dietary Intake Nutrients, Age, Gender, Race, Education Level)\"),\n    list(type = \"ordinal\", \n         variables = c(dietary_intake, \"RIDAGEYR\", \"RIAGENDR\", \"RIDRETH3\", \"DMDEDUC2\", \n                       \"BMXBMI\", \"LBXTC\", \"BPQ150\", \"DR1TKCAL\", \"DR1TSODI\"), \n         description = \"Model 7: Ordinal Logistic Regression (5 Dietary Intake Nutrients, Age, Gender, Race, Education Level, BMI, Total Cholesterol, High Blood Pressure Medication, Calories Intake, Low Sodium Meal)\")\n  )\n\n  for (model in models) {\n    obj &lt;- model.BPAnalysis(obj, type = model$type, variables = model$variables, response = response)\n    obj &lt;- summary.BPAnalysis(obj, model$description)\n  }\n\n  obj\n}\n\n# Function to output all summaries as HTML\noutput_summaries &lt;- function(obj, output_file = \"model_summaries.html\") {\n  html_content &lt;- \"&lt;html&gt;&lt;head&gt;&lt;title&gt;Model Summaries&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Model Summaries&lt;/h1&gt;\"\n\n  for (model_name in names(obj$summaries)) {\n    html_content &lt;- paste0(\n      html_content,\n      \"&lt;h2&gt;\", model_name, \"&lt;/h2&gt;\",\n      \"&lt;pre&gt;\", paste(obj$summaries[[model_name]], collapse = \"\\n\"), \"&lt;/pre&gt;\"\n    )\n  }\n\n  html_content &lt;- paste0(html_content, \"&lt;/body&gt;&lt;/html&gt;\")\n  writeLines(html_content, output_file)\n  message(\"Summaries written to \", output_file)\n}\n\n\n\n\n2.2 Systolic Blood Pressure\n\n\nCode\n# Run SYBP analysis\nsybp_obj &lt;- BPAnalysis(cleaned_data_imputed)\nsybp_obj &lt;- sybp.BPAnalysis(sybp_obj)\nsybp_obj &lt;- run_models.BPAnalysis(sybp_obj, response = \"sybp\")\noutput_summaries(sybp_obj, output_file = \"sybp_model_summaries.html\")\n\n\nSummaries written to sybp_model_summaries.html\n\n\nView Model Summaries in sybp_model_summaries.html\n\n\n2.3 Diastolic Blood Pressure\n\n\nCode\n# Run DIBP analysis\ndibp_obj &lt;- BPAnalysis(cleaned_data_imputed)\ndibp_obj &lt;- dibp.BPAnalysis(dibp_obj)\ndibp_obj &lt;- run_models.BPAnalysis(dibp_obj, response = \"dibp\")\noutput_summaries(dibp_obj, output_file = \"dibp_model_summaries.html\")\n\n\nSummaries written to dibp_model_summaries.html\n\n\nView Model Summaries in dibp_model_summaries.html"
  },
  {
    "objectID": "1111.html",
    "href": "1111.html",
    "title": "Final project",
    "section": "",
    "text": "Yishan Lin: JHED ID: ylin183; Email: ylin183@jh.edu\nYingqi Wang: JHED ID: ywang911; Email: ywang911@jh.edu\nYiming Ding: JHED ID: yding75; Email: yding75@jh.edu\nRuiqing Cai: JHED ID: rcai9; Email: rcai9@jh.edu"
  },
  {
    "objectID": "1111.html#authors-information",
    "href": "1111.html#authors-information",
    "title": "Final project",
    "section": "",
    "text": "Yishan Lin: JHED ID: ylin183; Email: ylin183@jh.edu\nYingqi Wang: JHED ID: ywang911; Email: ywang911@jh.edu\nYiming Ding: JHED ID: yding75; Email: yding75@jh.edu\nRuiqing Cai: JHED ID: rcai9; Email: rcai9@jh.edu"
  },
  {
    "objectID": "1111.html#data-preparation-and-robust-analysis",
    "href": "1111.html#data-preparation-and-robust-analysis",
    "title": "Final project",
    "section": "1. Data Preparation and Robust Analysis",
    "text": "1. Data Preparation and Robust Analysis\n\n\n\n\n\n\nNote\n\n\n\nIn this section, data downloading, processing, and some initial analysis were conducted by using the “functional Programming” Paradigms\n\n\n\n1.1 Download and Initial Cleaning\nData are directly downloaded from the CDC websites. For more information see the code\n\n\nCode\n# Create a folder to store all the data\nif (!dir.exists(\"data\")) { # check if folder already exists\n  dir.create(\"data\")\n}\n\n# Setup function to download the data\ndownload_and_save &lt;- function(url, filename) {\n  filepath &lt;- file.path(\"data\", filename)\n  \n  if (!file.exists(filepath)) { # Check if file already exists\n    message(paste(\"Downloading\", filename, \"...\"))\n    dataset &lt;- read_xpt(url)\n    saveRDS(dataset, filepath)\n  } else {\n    message(paste(filename, \"already exists. Loading from cache.\"))\n  }\n  \n  readRDS(filepath) # Load the dataset\n}\n \n# Function to clean individual datasets\nclean_dataset &lt;- function(data, vars) {\n  data %&gt;% dplyr::select(all_of(vars))\n}\n\n# Selecting data\ndatasets &lt;- list(\n  demo = list(\n    url = \"https://wwwn.cdc.gov/Nchs/Data/Nhanes/Public/2021/DataFiles/DEMO_L.xpt\",\n    file = \"demo_data.rds\",\n    vars = c(\"SEQN\", \"RIDAGEYR\", \"RIAGENDR\", \"RIDRETH3\")\n  ),\n  diet = list(\n    url = \"https://wwwn.cdc.gov/Nchs/Data/Nhanes/Public/2021/DataFiles/DR1TOT_L.xpt\",\n    file = \"diet_data.rds\",\n    vars = c(\"SEQN\", \"DR1TPOTA\", \"DR1TKCAL\")\n  ),\n  bp = list(\n    url = \"https://wwwn.cdc.gov/Nchs/Data/Nhanes/Public/2021/DataFiles/BPXO_L.xpt\",\n    file = \"bp_data.rds\",\n    vars = c(\"SEQN\", \"BPXOSY1\", \"BPXOSY2\", \"BPXOSY3\", \"BPXODI1\", \"BPXODI2\", \"BPXODI3\")\n  ),\n  body = list(\n    url = \"https://wwwn.cdc.gov/Nchs/Data/Nhanes/Public/2021/DataFiles/BMX_L.xpt\",\n    file = \"body_data.rds\",\n    vars = c(\"SEQN\", \"BMXBMI\")\n  ),\n  lab = list(\n    url = \"https://wwwn.cdc.gov/Nchs/Data/Nhanes/Public/2021/DataFiles/TCHOL_L.xpt\",\n    file = \"lab_data.rds\",\n    vars = c(\"SEQN\", \"LBXTC\")\n  ),\n  ques = list(\n    url = \"https://wwwn.cdc.gov/Nchs/Data/Nhanes/Public/2021/DataFiles/BPQ_L.xpt\",\n    file = \"ques_data.rds\",\n    vars = c(\"SEQN\", \"BPQ150\")\n  )\n)\n\n# Downloading, saving, and cleaning datasets\nnhanes_data &lt;- purrr::map(datasets, function(info) {\n  raw_data &lt;- download_and_save(info$url, info$file)\n  clean_dataset(raw_data, info$vars)\n})\n\n# Merging into single dataframe\nmerged_data &lt;- purrr::reduce(nhanes_data, dplyr::left_join, by = \"SEQN\")\n\n\n\n\n1.2 Process and Table 1\nTable 1: Characteristics of Study Participants from August 2021 to August 2023\n\n\nCode\n# Function to preprocess data\nprocess_data &lt;- function(data) {\n  data %&gt;%\n    dplyr::mutate(\n      RIAGENDR = dplyr::recode_factor(RIAGENDR, `1` = \"Male\", `2` = \"Female\"),\n      RIDRETH3 = dplyr::recode_factor(\n        RIDRETH3,\n        `1` = \"Mexican American\",\n        `2` = \"Other Hispanic\",\n        `3` = \"Non-Hispanic White\",\n        `4` = \"Non-Hispanic Black\",\n        `6` = \"Other\"\n      ),\n      BPQ150 = dplyr::recode_factor(BPQ150, `1` = \"Yes\", `2` = \"No\"),\n      sybp = rowMeans(dplyr::select(., BPXOSY1, BPXOSY2, BPXOSY3), na.rm = TRUE),\n      dibp = rowMeans(dplyr::select(., BPXODI1, BPXODI2, BPXODI3), na.rm = TRUE)\n    )\n}\n\n# Create Table 1 function\ncreate_table1 &lt;- function(data) {\n  table1(~ RIDAGEYR + RIAGENDR + RIDRETH3 + DR1TPOTA + BMXBMI + sybp + dibp + \n           BPQ150, data = data)\n}\n\n# Labeling data\nset_labels_and_units &lt;- function(data, labels, units = NULL) {\n  for (var in names(labels)) {\n    label(data[[var]]) &lt;- labels[[var]]\n  }\n  if (!is.null(units)) {\n    for (var in names(units)) {\n      units(data[[var]]) &lt;- units[[var]]\n    }\n  }\n  return(data)\n}\n\n## Define labels and units as named lists\nlabels &lt;- list(\n  RIDAGEYR = \"Age at Screening\",\n  RIAGENDR = \"Gender\",\n  RIDRETH3 = \"Race\",\n  BPQ150 = \"High Blood Pressure Medication\",\n  sybp = \"Systolic Blood Pressure\",\n  dibp = \"Diastolic Blood Pressure\",\n  BMXBMI = \"Body Mass Index\"\n)\n\nunits &lt;- list(\n  RIDAGEYR = \"Year\",\n  sybp = \"mmHg\",\n  dibp = \"mmHg\",\n  BMXBMI = \"kg/m\\u00B2\"\n)\n\n# Apply the data processing function\ncleaned_data &lt;- process_data(merged_data)\n\n# Apply labels and units\ncleaned_data &lt;- set_labels_and_units(cleaned_data, labels, units)\n\n# Generate Table 1\ncreate_table1(cleaned_data)\n\n\n\n\n\n\n\n\n\n\n\nOverall\n(N=11933)\n\n\n\n\nAge at Screening (Year)\n\n\n\nMean (SD)\n38.3 (25.6)\n\n\nMedian [Min, Max]\n37.0 [0, 80.0]\n\n\nGender\n\n\n\nMale\n5575 (46.7%)\n\n\nFemale\n6358 (53.3%)\n\n\nRace\n\n\n\nMexican American\n1117 (9.4%)\n\n\nOther Hispanic\n1373 (11.5%)\n\n\nNon-Hispanic White\n6217 (52.1%)\n\n\nNon-Hispanic Black\n1597 (13.4%)\n\n\nOther\n681 (5.7%)\n\n\nMissing\n948 (7.9%)\n\n\nPotassium (mg)\n\n\n\nMean (SD)\n2340 (1230)\n\n\nMedian [Min, Max]\n2150 [0, 14300]\n\n\nMissing\n5239 (43.9%)\n\n\nBody Mass Index (kg/m²)\n\n\n\nMean (SD)\n27.2 (8.14)\n\n\nMedian [Min, Max]\n26.4 [11.1, 74.8]\n\n\nMissing\n3462 (29.0%)\n\n\nSystolic Blood Pressure (mmHg)\n\n\n\nMean (SD)\n119 (18.2)\n\n\nMedian [Min, Max]\n116 [70.0, 232]\n\n\nMissing\n4415 (37.0%)\n\n\nDiastolic Blood Pressure (mmHg)\n\n\n\nMean (SD)\n72.2 (11.5)\n\n\nMedian [Min, Max]\n71.7 [34.0, 139]\n\n\nMissing\n4415 (37.0%)\n\n\nHigh Blood Pressure Medication\n\n\n\nYes\n2442 (20.5%)\n\n\nNo\n523 (4.4%)\n\n\nMissing\n8968 (75.2%)\n\n\n\n\n\n\n\nCode\n# Save cleaned data\nreadr::write_csv(cleaned_data, \"data/NHANES_cleaned_data.csv\")\n\n\n\n\n1.3 Robust Anlysis\nA stratified Analysis by gender was conducted.\n\n\nCode\n# Stratification function setup\nstratified_analysis &lt;- function(data, group_var, analysis_func) {\n  # Split data into groups\n  split_data &lt;- split(data, data[[group_var]])\n  \n  # Apply the analysis function and add group label\n  summary_list &lt;- map(split_data, ~ {\n    analysis_func(.x) %&gt;%\n      mutate(Gender = unique(.x[[group_var]])) # Add group label\n  })\n  \n  # Combine all group summaries into a single table\n  combined_summary &lt;- bind_rows(summary_list)\n  \n  # Return combined table\n  combined_summary\n}\n\nsummarize_data &lt;- function(data) {\n  data %&gt;%\n    summarize(\n      mean_age = mean(RIDAGEYR, na.rm = TRUE),\n      mean_sodium = mean(DR1TPOTA, na.rm = TRUE),\n      mean_sbp = mean(sybp, na.rm = TRUE),\n      mean_dbp = mean(dibp, na.rm = TRUE),\n      n = n()\n    )\n}\n\n# stratified analysis by gender\nstratified_summary &lt;- stratified_analysis(cleaned_data, \"RIAGENDR\", summarize_data)\nknitr::kable(stratified_summary, \n      caption = \"Table 2: Summary of each variables stratified by gender\", \n      format = \"html\")\n\n\n\nTable 2: Summary of each variables stratified by gender\n\n\nmean_age\nmean_sodium\nmean_sbp\nmean_dbp\nn\nGender\n\n\n\n\n37.12323\n2602.813\n121.2114\n72.55017\n5575\nMale\n\n\n39.36537\n2126.442\n117.2749\n71.91256\n6358\nFemale"
  },
  {
    "objectID": "1111.html#using-s3-to-conduct-object-oriented-programming",
    "href": "1111.html#using-s3-to-conduct-object-oriented-programming",
    "title": "Final project",
    "section": "2. Using S3 to Conduct Object-Oriented Programming",
    "text": "2. Using S3 to Conduct Object-Oriented Programming\n\n\nCode\n# Extend the S3 methods to cover all seven models\n\n# Define an S3 class for blood pressure analysis\nBPAnalysis &lt;- function(data) {\n  structure(\n    list(data = data, summaries = list()), # Store the dataset and summaries in the object\n    class = \"BPAnalysis\"\n  )\n}\n\n# S3 method for cleaning data\nclean.BPAnalysis &lt;- function(obj) {\n  obj$data &lt;- obj$data %&gt;%\n    mutate(\n      BP_Category = case_when(\n        sybp &lt; 90 ~ \"Low\",\n        sybp &gt;= 90 & sybp &lt;= 130 ~ \"Normal\",\n        sybp &gt; 130 ~ \"High\"\n      ) %&gt;% factor(levels = c(\"Low\", \"Normal\", \"High\")),\n      BP_Binary = ifelse(sybp &gt; 130, 1, 0)\n    )\n  obj\n}\n\n# S3 method for modeling with condition-based formulas\nmodel.BPAnalysis &lt;- function(obj, type = \"linear\", variables = c(\"DR1TPOTA\")) {\n  # Base formula\n  response &lt;- if (type == \"logistic\") \"BP_Binary\" else if (type == \"ordinal\") \"BP_Category\" else \"sybp\"\n  formula &lt;- as.formula(paste(response, \"~\", paste(variables, collapse = \" + \")))\n\n  if (type == \"linear\") {\n    obj$model &lt;- lm(formula, data = obj$data)\n  } else if (type == \"logistic\") {\n    obj$model &lt;- glm(formula, data = obj$data, family = binomial)\n  } else if (type == \"ordinal\") {\n    obj$model &lt;- MASS::polr(formula, data = obj$data, Hess = TRUE)\n  } else {\n    stop(\"Invalid model type.\")\n  }\n  obj\n}\n\n# S3 method for summarizing results\nsummary.BPAnalysis &lt;- function(obj, model_description) {\n  if (is.null(obj$model)) {\n    stop(\"No model has been created yet.\")\n  }\n  summary_text &lt;- capture.output(summary(obj$model))\n  obj$summaries[[model_description]] &lt;- summary_text\n  obj\n}\n\n# Extend S3 to handle all seven models using conditions\nrun_models.BPAnalysis &lt;- function(obj) {\n  models &lt;- list(\n    list(type = \"linear\", variables = c(\"DR1TPOTA\"), description = \"Model 1: Linear Model (Sodium Intake and Blood Pressure)\"),\n    list(type = \"linear\", variables = c(\"DR1TPOTA\", \"RIDAGEYR\", \"RIAGENDR\", \"RIDRETH3\"), description = \"Model 2: Linear Model (Sodium Intake, Age, Gender, Race)\"),\n    list(type = \"linear\", variables = c(\"DR1TPOTA\", \"RIDAGEYR\", \"RIAGENDR\", \"RIDRETH3\", \"BMXBMI\", \"LBXTC\", \"BPQ150\", \"DR1TKCAL\"), description = \"Model 3: Linear Model (Sodium Intake, Age, Gender, Race, BMI, Total Cholesterol, High Blood Pressure Medication, Calories Intake)\"),\n    list(type = \"logistic\", variables = c(\"DR1TPOTA\"), description = \"Model 4: Logistic Regression (Sodium Intake and Blood Pressure)\"),\n    list(type = \"ordinal\", variables = c(\"DR1TPOTA\"), description = \"Model 5: Ordinal Logistic Regression (Sodium Intake and Blood Pressure)\"),\n    list(type = \"ordinal\", variables = c(\"DR1TPOTA\", \"RIDAGEYR\", \"RIAGENDR\", \"RIDRETH3\"), description = \"Model 6: Ordinal Logistic Regression (Sodium Intake, Age, Gender, Race)\"),\n    list(type = \"ordinal\", variables = c(\"DR1TPOTA\", \"RIDAGEYR\", \"RIAGENDR\", \"RIDRETH3\", \"BMXBMI\", \"LBXTC\", \"BPQ150\", \"DR1TKCAL\"), description = \"Model 7: Ordinal Logistic Regression (Sodium Intake, Age, Gender, Race, BMI, Total Cholesterol, High Blood Pressure Medication, Calories Intake)\")\n  )\n\n  for (model in models) {\n    obj &lt;- model.BPAnalysis(obj, type = model$type, variables = model$variables)\n    obj &lt;- summary.BPAnalysis(obj, model$description)\n  }\n\n  obj\n}\n\n# Function to output all summaries as HTML\noutput_summaries &lt;- function(obj, output_file = \"model_summaries.html\") {\n  html_content &lt;- \"&lt;html&gt;&lt;head&gt;&lt;title&gt;Model Summaries&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Model Summaries&lt;/h1&gt;\"\n\n  for (model_name in names(obj$summaries)) {\n    html_content &lt;- paste0(\n      html_content,\n      \"&lt;h2&gt;\", model_name, \"&lt;/h2&gt;\",\n      \"&lt;pre&gt;\", paste(obj$summaries[[model_name]], collapse = \"\\n\"), \"&lt;/pre&gt;\"\n    )\n  }\n\n  html_content &lt;- paste0(html_content, \"&lt;/body&gt;&lt;/html&gt;\")\n  writeLines(html_content, output_file)\n  message(\"Summaries written to \", output_file)\n}\n\n# Create an S3 object and run all models\nbp_obj &lt;- BPAnalysis(cleaned_data)\nbp_obj &lt;- clean.BPAnalysis(bp_obj)\nbp_obj &lt;- run_models.BPAnalysis(bp_obj)\n\n# Output summaries to an HTML file\noutput_summaries(bp_obj)\n\n\nSummaries written to model_summaries.html\n\n\nView Model Summaries in model_summaries.html\n\n\nCode\n# Visualization 1: Distribution of Systolic Blood Pressure (sybp) by Gender\nggplot(cleaned_data, aes(x = sybp, fill = RIAGENDR)) +\n  geom_histogram(binwidth = 5, position = \"dodge\", color = \"black\") +\n  scale_fill_manual(values = c(\"#0073C2FF\", \"#EFC000FF\")) +\n  labs(\n    title = \"Distribution of Systolic Blood Pressure by Gender\",\n    x = \"Systolic Blood Pressure (mmHg)\",\n    y = \"Count\",\n    fill = \"Gender\"\n  ) +\n  theme_classic()\n\n\nWarning: Removed 4415 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Visualization 2: Boxplot of Sodium Intake (DR1TPOTA) by Gender\nggplot(cleaned_data, aes(x = RIAGENDR, y = DR1TPOTA, fill = RIAGENDR)) +\n  geom_boxplot() +\n  scale_fill_manual(values = c(\"#0073C2FF\", \"#EFC000FF\")) +\n  labs(\n    title = \"Sodium Intake by Gender\",\n    x = \"Gender\",\n    y = \"Sodium Intake (mg)\"\n  ) +\n  theme_classic()\n\n\nWarning: Removed 5239 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Visualization 3: Relationship between BMI (BMXBMI) and Systolic Blood Pressure (sybp)\nggplot(cleaned_data, aes(x = BMXBMI, y = sybp, color = RIDRETH3)) +\n  geom_point(alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"black\") +\n  scale_color_manual(values = c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#FF7F00\", \"#984EA3\")) +\n  labs(\n    title = \"Relationship between BMI and Systolic Blood Pressure by Race\",\n    x = \"Body Mass Index (kg/m²)\",\n    y = \"Systolic Blood Pressure (mmHg)\",\n    color = \"Race\"\n  ) +\n  theme_minimal()\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 4480 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 4480 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "Final_project.html#visualization",
    "href": "Final_project.html#visualization",
    "title": "Final project",
    "section": "3. Visualization",
    "text": "3. Visualization\n\n3.1 Distribution of Systolic Blood Pressure stratified by Gender\nUsing geom_histogram\n\n\nCode\n# Violin Plot of Systolic Blood Pressure by Education Level\nggplot(cleaned_data_imputed, aes(x = DMDEDUC2, y = sybp, fill = DMDEDUC2)) +\n  geom_violin(trim = FALSE) +  # Add violin plot without trimming\n  scale_fill_brewer(palette = \"Set3\") +\n  labs(\n    title = \"Violin Plot of Systolic Blood Pressure by Education Status\",\n    x = \"Education Level\",\n    y = \"Systolic Blood Pressure (mmHg)\",\n    fill = \"Education Levels\"\n  ) +\n  theme_classic() +\n  theme(\n    legend.position = \"right\",\n    plot.title = element_text(size = 14, face = \"bold\"),\n    axis.title = element_text(size = 12),\n    axis.text.x = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\n3.2 Distribution of Sodium Intake stratified by Gender\nUsing geom_boxplot to create box plot and geom_text to label\n\n\nCode\nmedians &lt;- cleaned_data_imputed %&gt;%\n  group_by(RIAGENDR) %&gt;%\n  summarize(median_sodium = median(DR1TSODI, na.rm = TRUE))\n\n# Visualization 2: Boxplot of Sodium Intake (DR1TSODI) by Gender\nggplot(cleaned_data_imputed, aes(x = RIAGENDR, y = DR1TSODI, fill = RIAGENDR)) +\n  geom_boxplot() +\n  scale_fill_manual(values = c(\"#94f0ff\", \"#ffa394\")) +\n  labs(\n    title = \"Sodium Intake by Gender\",\n    x = \"Gender\",\n    y = \"Sodium Intake (mg)\"\n  ) +\n  geom_text(\n    data = medians,\n    aes(x = RIAGENDR, y = median_sodium, label = round(median_sodium, 1)),\n    vjust = -0.5,\n    size = 3\n  ) +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n3.2 Relationship between Sodium Intake and Diastolic Blood Pressure\nUsing geom_point to create scatter plot\n\n\nCode\n# Visualization 3: Relationship between Sodium Intake and Diastolic Blood Pressure (dibp)\nggplot(cleaned_data_imputed, aes(x = DR1TPOTA, y = dibp, color = RIDRETH3)) +\n  geom_point(alpha = 0.7) +\n  scale_color_manual(values = c(\"#E69F00\", \"#009E73\", \"#56B4E9\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")) +\n  labs(\n    title = \"Relationship between Sodium Intake and Diastolic Blood Pressure by Race\",\n    x = \"Potassium Intake (mg)\",\n    y = \"Diastolic Blood Pressure (mmHg)\",\n    color = \"Race\"\n  ) +\n  theme_classic()"
  },
  {
    "objectID": "Final_project.html#section",
    "href": "Final_project.html#section",
    "title": "Final project",
    "section": "4.",
    "text": "4."
  },
  {
    "objectID": "Final_project.html#machine-learning-random-forest-to-predict-blood-pressure",
    "href": "Final_project.html#machine-learning-random-forest-to-predict-blood-pressure",
    "title": "Final project",
    "section": "4. Machine Learning: Random Forest to Predict Blood Pressure",
    "text": "4. Machine Learning: Random Forest to Predict Blood Pressure\n\n4.1 Model Implementation with Random Forest\n\n\nCode\n# Create simplified blood pressure category in cleaned_data_imputed\ncleaned_data_imputed &lt;- cleaned_data_imputed %&gt;%\n  # Create BP_Category for sybp\n  mutate(\n    BP_Category_SYBP = factor(case_when(\n      sybp &lt;= 130 ~ \"Normal\",\n      sybp &gt; 130 ~ \"High\"\n    ), levels = c(\"Normal\", \"High\")),\n    \n    # Create BP_Category for dibp\n    BP_Category_DIBP = factor(case_when(\n      dibp &lt;= 80 ~ \"Normal\",\n      dibp &gt; 80 ~ \"High\"\n    ), levels = c(\"Normal\", \"High\")),\n    \n    # Combine into a single BP_Category\n    BP_Category = case_when(\n      BP_Category_SYBP == \"High\" | BP_Category_DIBP == \"High\" ~ \"High\",\n      TRUE ~ \"Normal\" # Default fallback\n    )\n  ) %&gt;%\n  # Convert to factor for training\n  mutate(BP_Category = factor(BP_Category, levels = c(\"Normal\", \"High\")))\n\n# Parallel processing setup\ncores &lt;- detectCores() - 1 # Reserve 1 core for system processes\ncl &lt;- makeCluster(cores)\nregisterDoParallel(cl)\n\n# Prepare the dataset\n\nfeatures &lt;- cleaned_data_imputed %&gt;% \n  dplyr::select(\n    c(RIDAGEYR, RIAGENDR, RIDRETH3, DMDEDUC2, DR1TSODI, DR1TFIBE, DR1TPOTA, \n      DR1TCALC, DR1TMAGN, DR1TKCAL, BMXBMI, LBXTC, BPQ150) \n  )\n\ntarget_sybp &lt;- cleaned_data_imputed$BP_Category_SYBP  # Target for systolic blood pressure\ntarget_dibp &lt;- cleaned_data_imputed$BP_Category_DIBP  # Target for diastolic blood pressure\ntarget_bp &lt;- cleaned_data_imputed$BP_Category\n\n# Combine features and targets into separate datasets for training\ndata_for_model_sybp &lt;- cbind(features, sybp = target_sybp)\ndata_for_model_dibp &lt;- cbind(features, dibp = target_dibp)\ndata_for_model_bp &lt;- cbind(features, bp = target_bp)\n\n# Split data into training and testing sets\nset.seed(20241217)\ntrain_index_sybp &lt;- createDataPartition(data_for_model_sybp$sybp, p = 0.8, list = FALSE)\ntrain_data_sybp &lt;- data_for_model_sybp[train_index_sybp, ]\ntest_data_sybp &lt;- data_for_model_sybp[-train_index_sybp, ]\n\ntrain_index_dibp &lt;- createDataPartition(data_for_model_dibp$dibp, p = 0.8, list = FALSE)\ntrain_data_dibp &lt;- data_for_model_dibp[train_index_dibp, ]\ntest_data_dibp &lt;- data_for_model_dibp[-train_index_dibp, ]\n\ntrain_index_bp &lt;- createDataPartition(data_for_model_bp$bp, p = 0.8, list = FALSE)\ntrain_data_bp &lt;- data_for_model_bp[train_index_bp, ]\ntest_data_bp &lt;- data_for_model_bp[-train_index_bp, ]\n\n# Train Random Forest model for SYBP\nset.seed(20241217)\nrf_model_sybp &lt;- randomForest(\n  sybp ~ ., # Predict systolic blood pressure\n  data = train_data_sybp,\n  ntree = 250,\n  importance = TRUE\n)\n\n# Train Random Forest model for DIBP\nset.seed(20241217)\nrf_model_dibp &lt;- randomForest(\n  dibp ~ ., # Predict diastolic blood pressure\n  data = train_data_dibp,\n  ntree = 250,\n  importance = TRUE\n)\n\nset.seed(20241217)\nrf_model_bp &lt;- randomForest(\n  bp ~ ., # Predict diastolic blood pressure\n  data = train_data_bp,\n  ntree = 250,\n  importance = TRUE\n)\n\n# Stop parallel processing\nstopCluster(cl)\n\n\n\n\n4.2 Systolic Blood Pressure Prediction Performance\n\n\nCode\n# Make predictions on the test data\npredicted_sybp &lt;- predict(rf_model_sybp, test_data_sybp)\nactual_sybp &lt;- test_data_sybp$sybp\n\n# Evaluate model performance\nconfusion_matrix_sybp &lt;- caret::confusionMatrix(predicted_sybp, actual_sybp)\nprint(confusion_matrix_sybp)\n\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction Normal High\n    Normal   1080  405\n    High       35   41\n                                          \n               Accuracy : 0.7181          \n                 95% CI : (0.6951, 0.7403)\n    No Information Rate : 0.7143          \n    P-Value [Acc &gt; NIR] : 0.3804          \n                                          \n                  Kappa : 0.0806          \n                                          \n Mcnemar's Test P-Value : &lt;2e-16          \n                                          \n            Sensitivity : 0.96861         \n            Specificity : 0.09193         \n         Pos Pred Value : 0.72727         \n         Neg Pred Value : 0.53947         \n             Prevalence : 0.71429         \n         Detection Rate : 0.69186         \n   Detection Prevalence : 0.95131         \n      Balanced Accuracy : 0.53027         \n                                          \n       'Positive' Class : Normal          \n                                          \n\n\nCode\n# Variable importance\nimportance &lt;- importance(rf_model_sybp)\nvarImpPlot(rf_model_sybp)\n\n\n\n\n\n\n\n\n\n\n\n4.3 Diastolic Blood Pressure Prediction Performance\n\n\nCode\n# Make predictions on the test data\npredicted_dibp &lt;- predict(rf_model_dibp, test_data_dibp)\nactual_dibp &lt;- test_data_dibp$dibp\n\n# Evaluate model performance\nconfusion_matrix_dibp &lt;- caret::confusionMatrix(predicted_dibp, actual_dibp)\nprint(confusion_matrix_dibp)\n\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction Normal High\n    Normal   1075  402\n    High       44   40\n                                          \n               Accuracy : 0.7143          \n                 95% CI : (0.6912, 0.7366)\n    No Information Rate : 0.7168          \n    P-Value [Acc &gt; NIR] : 0.6013          \n                                          \n                  Kappa : 0.0678          \n                                          \n Mcnemar's Test P-Value : &lt;2e-16          \n                                          \n            Sensitivity : 0.9607          \n            Specificity : 0.0905          \n         Pos Pred Value : 0.7278          \n         Neg Pred Value : 0.4762          \n             Prevalence : 0.7168          \n         Detection Rate : 0.6887          \n   Detection Prevalence : 0.9462          \n      Balanced Accuracy : 0.5256          \n                                          \n       'Positive' Class : Normal          \n                                          \n\n\nCode\n# Variable importance\nimportance &lt;- importance(rf_model_dibp)\nvarImpPlot(rf_model_dibp)\n\n\n\n\n\n\n\n\n\n\n\n4.4 hypertension Prediction Performance\n\n\nCode\n# Make predictions on the test data\npredicted_bp &lt;- predict(rf_model_bp, test_data_bp)\nactual_bp &lt;- test_data_bp$bp\n\n# Evaluate model performance\nconfusion_matrix_bp &lt;- caret::confusionMatrix(predicted_bp, actual_bp)\nprint(confusion_matrix_bp)\n\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction Normal High\n    Normal    683  410\n    High      215  253\n                                         \n               Accuracy : 0.5996         \n                 95% CI : (0.5748, 0.624)\n    No Information Rate : 0.5753         \n    P-Value [Acc &gt; NIR] : 0.02718        \n                                         \n                  Kappa : 0.1479         \n                                         \n Mcnemar's Test P-Value : 8.493e-15      \n                                         \n            Sensitivity : 0.7606         \n            Specificity : 0.3816         \n         Pos Pred Value : 0.6249         \n         Neg Pred Value : 0.5406         \n             Prevalence : 0.5753         \n         Detection Rate : 0.4375         \n   Detection Prevalence : 0.7002         \n      Balanced Accuracy : 0.5711         \n                                         \n       'Positive' Class : Normal         \n                                         \n\n\nCode\n# Variable importance\nimportance &lt;- importance(rf_model_bp)\nvarImpPlot(rf_model_bp)"
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "Enhanced Dashboard",
    "section": "",
    "text": "Data from NHANES(2021-2023)\n\n\nCode\ntextInput(\"name\", \"What is the title of the graph?\", \"Distribution of Variables\")\n\n\n\nWhat is the title of the graph?\n\n\n\n\nCode\nselectInput(\"variable\", label = \"Select a variable:\",\n            choices = c(\"Please select\",\n                        \"Sodium Intake\", \"Potassium Intake\", \"Calcium Intake\",\n                        \"Systolic Blood Pressure\", \"Diastolic Blood Pressure\", \n                        \"BMI\", \"Age\"), selected = \"Please select\")\n\n\n\nSelect a variable:\n\nPlease select\nSodium Intake\nPotassium Intake\nCalcium Intake\nSystolic Blood Pressure\nDiastolic Blood Pressure\nBMI\nAge\n\n\n\n\n\nCode\nselectInput(\"plot_type\", label = \"Select plot type:\",\n            choices = c(\"Histogram\", \"Boxplot\", \"Scatterplot\"), selected = \"Histogram\")\n\n\n\nSelect plot type:\n\nHistogram\nBoxplot\nScatterplot\n\n\n\n\n\nCode\nselectInput(\"n_breaks\", label = \"Number of bins (for histograms):\",\n            choices = c(10, 20, 30), selected = 20)\n\n\n\nNumber of bins (for histograms):\n\n10\n20\n30\n\n\n\n\n\nCode\ncheckboxInput(\"density\", \"Show density curve (for histograms)\", FALSE)\n\n\n\n\n\n\nShow density curve (for histograms)\n\n\n\n\n\nCode\nsliderInput(\"bw_adjust\", label = \"Bandwidth adjustment:\",\n            min = 0.2, max = 4, value = 2, step = 0.4)\n\n\n\nBandwidth adjustment:\n\n\n\n\nCode\nselectInput(\"color\", label = \"Select color:\", \n            choices = c(\"Blue\", \"Pink\", \"Green\", \"Purple\", \"Yellow\"), selected = \"Green\")\n\n\n\nSelect color:\n\nBlue\nPink\nGreen\nPurple\nYellow"
  },
  {
    "objectID": "test.html#column",
    "href": "test.html#column",
    "title": "Enhanced Dashboard",
    "section": "",
    "text": "Data from NHANES(2021-2023)\n\n\nCode\ntextInput(\"name\", \"What is the title of the graph?\", \"Distribution of Variables\")\n\n\n\nWhat is the title of the graph?\n\n\n\n\nCode\nselectInput(\"variable\", label = \"Select a variable:\",\n            choices = c(\"Please select\",\n                        \"Sodium Intake\", \"Potassium Intake\", \"Calcium Intake\",\n                        \"Systolic Blood Pressure\", \"Diastolic Blood Pressure\", \n                        \"BMI\", \"Age\"), selected = \"Please select\")\n\n\n\nSelect a variable:\n\nPlease select\nSodium Intake\nPotassium Intake\nCalcium Intake\nSystolic Blood Pressure\nDiastolic Blood Pressure\nBMI\nAge\n\n\n\n\n\nCode\nselectInput(\"plot_type\", label = \"Select plot type:\",\n            choices = c(\"Histogram\", \"Boxplot\", \"Scatterplot\"), selected = \"Histogram\")\n\n\n\nSelect plot type:\n\nHistogram\nBoxplot\nScatterplot\n\n\n\n\n\nCode\nselectInput(\"n_breaks\", label = \"Number of bins (for histograms):\",\n            choices = c(10, 20, 30), selected = 20)\n\n\n\nNumber of bins (for histograms):\n\n10\n20\n30\n\n\n\n\n\nCode\ncheckboxInput(\"density\", \"Show density curve (for histograms)\", FALSE)\n\n\n\n\n\n\nShow density curve (for histograms)\n\n\n\n\n\nCode\nsliderInput(\"bw_adjust\", label = \"Bandwidth adjustment:\",\n            min = 0.2, max = 4, value = 2, step = 0.4)\n\n\n\nBandwidth adjustment:\n\n\n\n\nCode\nselectInput(\"color\", label = \"Select color:\", \n            choices = c(\"Blue\", \"Pink\", \"Green\", \"Purple\", \"Yellow\"), selected = \"Green\")\n\n\n\nSelect color:\n\nBlue\nPink\nGreen\nPurple\nYellow"
  },
  {
    "objectID": "test.html#column-1",
    "href": "test.html#column-1",
    "title": "Enhanced Dashboard",
    "section": "Column",
    "text": "Column\n\nDynamic Plot\n\n\nCode\nrenderPlot({\n  plot_color &lt;- switch(input$color, \"Blue\" = \"#33b0ff\", \"Yellow\" = \"#f7e284\", \"Green\" = \"#9ed450\", \"Purple\" = \"#b39ddb\", \"Pink\" = \"#ffb6c1\")\n  \n  if (input$variable == \"Please select\") {\n    plot.new()\n    text(0.5, 0.5, \"Please select a variable and plot type.\", cex = 1.5)\n  } else {\n    var &lt;- switch(input$variable,\n                  \"Sodium Intake\" = data$DR1TSODI,\n                  \"Potassium Intake\" = data$DR1TKCAL,\n                  \"Calcium Intake\" = data$DR1TCA,\n                  \"Systolic Blood Pressure\" = data$sybp,\n                  \"Diastolic Blood Pressure\" = data$dibp,\n                  \"BMI\" = data$BMXBMI,\n                  \"Age\" = data$RIDAGEYR)\n    if (input$plot_type == \"Histogram\") {\n      hist(var, probability = TRUE, breaks = as.numeric(input$n_breaks),\n           xlab = input$variable, main = input$name, col = plot_color)\n      if (input$density) {\n        dens &lt;- density(var, adjust = input$bw_adjust)\n        lines(dens, col = \"red\")\n      }\n    } else if (input$plot_type == \"Boxplot\") {\n      boxplot(var ~ data$RIAGENDR, main = paste(\"Boxplot of\", input$variable),\n              xlab = \"Gender\", ylab = input$variable, col = plot_color)\n    } else if (input$plot_type == \"Scatterplot\") {\n      scatter_var &lt;- switch(input$variable,\n                            \"Sodium Intake\" = data$DR1TSODI,\n                            \"Potassium Intake\" = data$DR1TKCAL)\n      plot(scatter_var, data$sybp, col = plot_color, pch = 19,\n           xlab = input$variable, ylab = \"Systolic Blood Pressure\",\n           main = paste(\"Scatterplot:\", input$variable, \"vs Systolic BP\"))\n    }\n  }\n})"
  },
  {
    "objectID": "test.html#column-2",
    "href": "test.html#column-2",
    "title": "Enhanced Dashboard",
    "section": "Column",
    "text": "Column\n\nSummary Statistics\n\n\nCode\nrenderPrint({\n  if (input$variable != \"Please select\") {\n    var &lt;- switch(input$variable,\n                  \"Sodium Intake\" = data$DR1TSODI,\n                  \"Potassium Intake\" = data$DR1TKCAL,\n                  \"Calcium Intake\" = data$DR1TCA,\n                  \"Systolic Blood Pressure\" = data$sybp,\n                  \"Diastolic Blood Pressure\" = data$dibp,\n                  \"BMI\" = data$BMXBMI,\n                  \"Age\" = data$RIDAGEYR)\n    summary(var)\n  } else {\n    \"Please select a variable to view summary statistics.\"\n  }\n})\n\n\n\n\n\n\n\nDownload Plot\n\n\nCode\ndownloadHandler(\n  filename = function() {\n    paste(\"plot_\", Sys.Date(), \".png\", sep = \"\")\n  },\n  content = function(file) {\n    png(file)\n    plot_color &lt;- switch(input$color, \"Blue\" = \"#33b0ff\", \"Yellow\" = \"#f7e284\", \"Green\" = \"#9ed450\", \"Purple\" = \"#b39ddb\", \"Pink\" = \"#ffb6c1\")\n    var &lt;- switch(input$variable,\n                  \"Sodium Intake\" = data$DR1TSODI,\n                  \"Potassium Intake\" = data$DR1TKCAL,\n                  \"Calcium Intake\" = data$DR1TCA,\n                  \"Systolic Blood Pressure\" = data$sybp,\n                  \"Diastolic Blood Pressure\" = data$dibp,\n                  \"BMI\" = data$BMXBMI,\n                  \"Age\" = data$RIDAGEYR)\n    if (input$plot_type == \"Histogram\") {\n      hist(var, probability = TRUE, breaks = as.numeric(input$n_breaks),\n           xlab = input$variable, main = input$name, col = plot_color)\n      if (input$density) {\n        dens &lt;- density(var, adjust = input$bw_adjust)\n        lines(dens, col = \"red\")\n      }\n    }\n    dev.off()\n  }\n)\n\n\n\n\nDownload"
  }
]